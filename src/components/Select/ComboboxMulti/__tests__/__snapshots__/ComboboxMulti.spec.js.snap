// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`ComboboxMulti rendering should initially render empty component correctly 1`] = `
<ComboboxMulti
  inputPlaceholder="type here..."
  listOptimizerProps={
    Object {
      "defaultHeight": 800,
      "defaultWidth": 800,
    }
  }
  noSuggestionsPlaceholder="No suggestions..."
  onBlur={[MockFunction]}
  onInputValueChange={[MockFunction]}
  onSelectionChange={[MockFunction]}
  showClearButton={false}
  suggestionToString={[Function]}
  suggestions={
    Array [
      Object {
        "name": "Sun",
      },
      Object {
        "name": "Moon",
      },
      Object {
        "name": "Mercury",
      },
      Object {
        "name": "Venus",
      },
      Object {
        "name": "Earth",
      },
      Object {
        "name": "Mars",
      },
      Object {
        "name": "Jupiter",
      },
      Object {
        "name": "Saturn",
      },
      Object {
        "name": "Neptun",
      },
    ]
  }
>
  <SelectBase
    blurredRenderer={[Function]}
    clearTitle=""
    focusedRenderer={[Function]}
    inputRef={
      Object {
        "current": <input
          aria-autocomplete="list"
          aria-labelledby="downshift-0-label"
          autocomplete="off"
          class="ComboboxMulti__input"
          id="downshift-0-input"
          placeholder="type here..."
          value=""
        />,
      }
    }
    keepExpandedAfterSelection={true}
    listRenderer={[Function]}
    onBlur={[MockFunction]}
    onInputValueChange={[MockFunction]}
    onSelectionChange={[MockFunction]}
    showClearButton={false}
    suggestionToString={[Function]}
    suggestions={
      Array [
        Object {
          "name": "Sun",
        },
        Object {
          "name": "Moon",
        },
        Object {
          "name": "Mercury",
        },
        Object {
          "name": "Venus",
        },
        Object {
          "name": "Earth",
        },
        Object {
          "name": "Mars",
        },
        Object {
          "name": "Jupiter",
        },
        Object {
          "name": "Saturn",
        },
        Object {
          "name": "Neptun",
        },
      ]
    }
  >
    <div
      className="SelectBase"
    >
      <Downshift
        defaultHighlightedIndex={0}
        defaultIsOpen={false}
        environment={[Window]}
        getA11yStatusMessage={[Function]}
        inputValue=""
        itemToString={[Function]}
        onChange={[Function]}
        onInputValueChange={[Function]}
        onOuterClick={[Function]}
        onSelect={[Function]}
        onStateChange={[Function]}
        onUserAction={[Function]}
        scrollIntoView={[Function]}
        selectedItemChanged={[Function]}
        stateReducer={[Function]}
        suppressRefError={false}
      >
        <div
          aria-expanded={false}
          aria-haspopup="listbox"
          aria-labelledby="downshift-0-label"
          aria-owns={null}
          className="SelectBase__main"
          role="combobox"
        >
          <FieldWrapper
            className="SelectBase__field"
            clearLabel=""
            isFocused={false}
            onClear={[Function]}
            onClick={[Function]}
            onKeyDown={[Function]}
            showClearButton={false}
          >
            <div
              className="FieldWrapper SelectBase__field"
              onClick={[Function]}
              onKeyDown={[Function]}
            >
              <div
                className="FieldWrapper__content"
              >
                <div
                  className="ComboboxMulti__wrapper"
                  role="searchbox"
                  tabIndex={0}
                >
                  <input
                    aria-activedescendant={null}
                    aria-autocomplete="list"
                    aria-controls={null}
                    aria-labelledby="downshift-0-label"
                    autoComplete="off"
                    className="ComboboxMulti__input"
                    id="downshift-0-input"
                    onBlur={[Function]}
                    onChange={[Function]}
                    onKeyDown={[Function]}
                    placeholder="type here..."
                    value=""
                  />
                  <IoMdArrowDropdown
                    aria-haspopup={true}
                    aria-label="open menu"
                    className="ComboboxMulti__dropdownIcon"
                    data-toggle={true}
                    onBlur={[Function]}
                    onClick={[Function]}
                    onKeyDown={[Function]}
                    onKeyUp={[Function]}
                    role="button"
                    type="button"
                  >
                    <IconBase
                      aria-haspopup={true}
                      aria-label="open menu"
                      attr={
                        Object {
                          "viewBox": "0 0 512 512",
                        }
                      }
                      className="ComboboxMulti__dropdownIcon"
                      data-toggle={true}
                      onBlur={[Function]}
                      onClick={[Function]}
                      onKeyDown={[Function]}
                      onKeyUp={[Function]}
                      role="button"
                      type="button"
                    >
                      <svg
                        aria-haspopup={true}
                        aria-label="open menu"
                        className="ComboboxMulti__dropdownIcon"
                        data-toggle={true}
                        fill="currentColor"
                        height="1em"
                        onBlur={[Function]}
                        onClick={[Function]}
                        onKeyDown={[Function]}
                        onKeyUp={[Function]}
                        role="button"
                        stroke="currentColor"
                        strokeWidth="0"
                        style={
                          Object {
                            "color": undefined,
                          }
                        }
                        type="button"
                        viewBox="0 0 512 512"
                        width="1em"
                        xmlns="http://www.w3.org/2000/svg"
                      >
                        <path
                          d="M128 192l128 128 128-128z"
                          key="0"
                        />
                      </svg>
                    </IconBase>
                  </IoMdArrowDropdown>
                </div>
                <List
                  aria-labelledby="downshift-0-label"
                  doSelectOnNavigate={false}
                  id="downshift-0-menu"
                  isControlledNavigation={true}
                  isDivided={false}
                  role="listbox"
                >
                  <ul
                    aria-labelledby="downshift-0-label"
                    className="List"
                    id="downshift-0-menu"
                    role="listbox"
                  />
                </List>
              </div>
            </div>
          </FieldWrapper>
        </div>
      </Downshift>
    </div>
  </SelectBase>
</ComboboxMulti>
`;

exports[`ComboboxMulti rendering should render all suggestions from the list 1`] = `
<ComboboxMulti
  inputPlaceholder="type here..."
  listOptimizerProps={
    Object {
      "defaultHeight": 800,
      "defaultWidth": 800,
    }
  }
  noSuggestionsPlaceholder="No suggestions..."
  onBlur={[MockFunction]}
  onInputValueChange={[MockFunction]}
  onSelectionChange={[MockFunction]}
  showClearButton={false}
  suggestionToString={[Function]}
  suggestions={
    Array [
      Object {
        "name": "Sun",
      },
      Object {
        "name": "Moon",
      },
      Object {
        "name": "Mercury",
      },
      Object {
        "name": "Venus",
      },
      Object {
        "name": "Earth",
      },
      Object {
        "name": "Mars",
      },
      Object {
        "name": "Jupiter",
      },
      Object {
        "name": "Saturn",
      },
      Object {
        "name": "Neptun",
      },
    ]
  }
>
  <SelectBase
    blurredRenderer={[Function]}
    clearTitle=""
    focusedRenderer={[Function]}
    inputRef={
      Object {
        "current": <input
          aria-activedescendant="downshift-3-item-0"
          aria-autocomplete="list"
          aria-controls="downshift-3-menu"
          aria-labelledby="downshift-3-label"
          autocomplete="off"
          class="ComboboxMulti__input"
          id="downshift-3-input"
          placeholder="type here..."
          value=""
        />,
      }
    }
    keepExpandedAfterSelection={true}
    listRenderer={[Function]}
    onBlur={[MockFunction]}
    onInputValueChange={[MockFunction]}
    onSelectionChange={[MockFunction]}
    showClearButton={false}
    suggestionToString={[Function]}
    suggestions={
      Array [
        Object {
          "name": "Sun",
        },
        Object {
          "name": "Moon",
        },
        Object {
          "name": "Mercury",
        },
        Object {
          "name": "Venus",
        },
        Object {
          "name": "Earth",
        },
        Object {
          "name": "Mars",
        },
        Object {
          "name": "Jupiter",
        },
        Object {
          "name": "Saturn",
        },
        Object {
          "name": "Neptun",
        },
      ]
    }
  >
    <div
      className="SelectBase"
    >
      <Downshift
        defaultHighlightedIndex={0}
        defaultIsOpen={false}
        environment={[Window]}
        getA11yStatusMessage={[Function]}
        inputValue=""
        itemToString={[Function]}
        onChange={[Function]}
        onInputValueChange={[Function]}
        onOuterClick={[Function]}
        onSelect={[Function]}
        onStateChange={[Function]}
        onUserAction={[Function]}
        scrollIntoView={[Function]}
        selectedItemChanged={[Function]}
        stateReducer={[Function]}
        suppressRefError={false}
      >
        <div
          aria-expanded={true}
          aria-haspopup="listbox"
          aria-labelledby="downshift-3-label"
          aria-owns="downshift-3-menu"
          className="SelectBase__main SelectBase__main--focused"
          role="combobox"
        >
          <FieldWrapper
            className="SelectBase__field"
            clearLabel=""
            isFocused={true}
            onClear={[Function]}
            onClick={[Function]}
            onKeyDown={[Function]}
            showClearButton={false}
          >
            <div
              className="FieldWrapper FieldWrapper--isFocused SelectBase__field"
              onClick={[Function]}
              onKeyDown={[Function]}
            >
              <div
                className="FieldWrapper__content"
              >
                <div
                  className="ComboboxMulti__wrapper"
                  role="searchbox"
                  tabIndex={0}
                >
                  <input
                    aria-activedescendant="downshift-3-item-0"
                    aria-autocomplete="list"
                    aria-controls="downshift-3-menu"
                    aria-labelledby="downshift-3-label"
                    autoComplete="off"
                    className="ComboboxMulti__input"
                    id="downshift-3-input"
                    onBlur={[Function]}
                    onChange={[Function]}
                    onKeyDown={[Function]}
                    placeholder="type here..."
                    value=""
                  />
                  <IoMdArrowDropup
                    aria-haspopup={true}
                    aria-label="close menu"
                    className="ComboboxMulti__dropdownIcon"
                    data-toggle={true}
                    onBlur={[Function]}
                    onClick={[Function]}
                    onKeyDown={[Function]}
                    onKeyUp={[Function]}
                    role="button"
                    type="button"
                  >
                    <IconBase
                      aria-haspopup={true}
                      aria-label="close menu"
                      attr={
                        Object {
                          "viewBox": "0 0 512 512",
                        }
                      }
                      className="ComboboxMulti__dropdownIcon"
                      data-toggle={true}
                      onBlur={[Function]}
                      onClick={[Function]}
                      onKeyDown={[Function]}
                      onKeyUp={[Function]}
                      role="button"
                      type="button"
                    >
                      <svg
                        aria-haspopup={true}
                        aria-label="close menu"
                        className="ComboboxMulti__dropdownIcon"
                        data-toggle={true}
                        fill="currentColor"
                        height="1em"
                        onBlur={[Function]}
                        onClick={[Function]}
                        onKeyDown={[Function]}
                        onKeyUp={[Function]}
                        role="button"
                        stroke="currentColor"
                        strokeWidth="0"
                        style={
                          Object {
                            "color": undefined,
                          }
                        }
                        type="button"
                        viewBox="0 0 512 512"
                        width="1em"
                        xmlns="http://www.w3.org/2000/svg"
                      >
                        <path
                          d="M128 320l128-128 128 128z"
                          key="0"
                        />
                      </svg>
                    </IconBase>
                  </IoMdArrowDropup>
                </div>
                <List
                  aria-labelledby="downshift-3-label"
                  className="SelectBase__list--focused"
                  doSelectOnNavigate={false}
                  id="downshift-3-menu"
                  isControlledNavigation={true}
                  isDivided={false}
                  role="listbox"
                >
                  <ul
                    aria-labelledby="downshift-3-label"
                    className="List SelectBase__list--focused"
                    id="downshift-3-menu"
                    role="listbox"
                  >
                    <SuggestionsList
                      className="List__item"
                      defaultHeight={800}
                      defaultWidth={800}
                      getItemProps={[Function]}
                      highlightedIndex={0}
                      inputValue=""
                      key=".0"
                      noSuggestionsPlaceholder="No suggestions..."
                      suggestionToString={[Function]}
                      suggestions={
                        Array [
                          Object {
                            "name": "Sun",
                          },
                          Object {
                            "name": "Moon",
                          },
                          Object {
                            "name": "Mercury",
                          },
                          Object {
                            "name": "Venus",
                          },
                          Object {
                            "name": "Earth",
                          },
                          Object {
                            "name": "Mars",
                          },
                          Object {
                            "name": "Jupiter",
                          },
                          Object {
                            "name": "Saturn",
                          },
                          Object {
                            "name": "Neptun",
                          },
                        ]
                      }
                    >
                      <ListOptimizer
                        rowCount={9}
                      >
                        <AutoSizer
                          disableHeight={false}
                          disableWidth={false}
                          onResize={[Function]}
                          style={Object {}}
                        >
                          <div
                            style={
                              Object {
                                "height": 0,
                                "overflow": "visible",
                                "width": 0,
                              }
                            }
                          >
                            <List
                              autoHeight={false}
                              deferredMeasurementCache={
                                CellMeasurerCache {
                                  "_cellHeightCache": Object {},
                                  "_cellWidthCache": Object {},
                                  "_columnCount": 0,
                                  "_columnWidthCache": Object {},
                                  "_defaultHeight": 30,
                                  "_defaultWidth": 100,
                                  "_hasFixedHeight": false,
                                  "_hasFixedWidth": true,
                                  "_keyMapper": [Function],
                                  "_minHeight": 0,
                                  "_minWidth": 0,
                                  "_rowCount": 0,
                                  "_rowHeightCache": Object {},
                                  "columnWidth": [Function],
                                  "rowHeight": [Function],
                                }
                              }
                              estimatedRowSize={30}
                              height={0}
                              noRowsRenderer={[Function]}
                              onRowsRendered={[Function]}
                              onScroll={[Function]}
                              overscanIndicesGetter={[Function]}
                              overscanRowCount={10}
                              rowCount={9}
                              rowHeight={[Function]}
                              rowRenderer={[Function]}
                              scrollToAlignment="auto"
                              scrollToIndex={-1}
                              style={Object {}}
                              width={0}
                            >
                              <Grid
                                aria-label="grid"
                                aria-readonly={true}
                                autoContainerWidth={true}
                                autoHeight={false}
                                autoWidth={false}
                                cellRangeRenderer={[Function]}
                                cellRenderer={[Function]}
                                className="ReactVirtualized__List"
                                columnCount={1}
                                columnWidth={0}
                                containerRole="rowgroup"
                                containerStyle={Object {}}
                                deferredMeasurementCache={
                                  CellMeasurerCache {
                                    "_cellHeightCache": Object {},
                                    "_cellWidthCache": Object {},
                                    "_columnCount": 0,
                                    "_columnWidthCache": Object {},
                                    "_defaultHeight": 30,
                                    "_defaultWidth": 100,
                                    "_hasFixedHeight": false,
                                    "_hasFixedWidth": true,
                                    "_keyMapper": [Function],
                                    "_minHeight": 0,
                                    "_minWidth": 0,
                                    "_rowCount": 0,
                                    "_rowHeightCache": Object {},
                                    "columnWidth": [Function],
                                    "rowHeight": [Function],
                                  }
                                }
                                estimatedColumnSize={100}
                                estimatedRowSize={30}
                                getScrollbarSize={[Function]}
                                height={0}
                                isScrollingOptOut={false}
                                noContentRenderer={[Function]}
                                noRowsRenderer={[Function]}
                                onRowsRendered={[Function]}
                                onScroll={[Function]}
                                onScrollbarPresenceChange={[Function]}
                                onSectionRendered={[Function]}
                                overscanColumnCount={0}
                                overscanIndicesGetter={[Function]}
                                overscanRowCount={10}
                                role="grid"
                                rowCount={9}
                                rowHeight={[Function]}
                                rowRenderer={[Function]}
                                scrollToAlignment="auto"
                                scrollToColumn={-1}
                                scrollToIndex={-1}
                                scrollToRow={-1}
                                scrollingResetTimeInterval={150}
                                style={Object {}}
                                tabIndex={0}
                                width={0}
                              >
                                <div
                                  aria-label="grid"
                                  aria-readonly={true}
                                  className="ReactVirtualized__Grid ReactVirtualized__List"
                                  onScroll={[Function]}
                                  role="grid"
                                  style={
                                    Object {
                                      "WebkitOverflowScrolling": "touch",
                                      "boxSizing": "border-box",
                                      "direction": "ltr",
                                      "height": 0,
                                      "overflowX": "hidden",
                                      "overflowY": "auto",
                                      "position": "relative",
                                      "width": 0,
                                      "willChange": "transform",
                                    }
                                  }
                                  tabIndex={0}
                                />
                              </Grid>
                            </List>
                          </div>
                        </AutoSizer>
                      </ListOptimizer>
                    </SuggestionsList>
                  </ul>
                </List>
              </div>
            </div>
          </FieldWrapper>
        </div>
      </Downshift>
    </div>
  </SelectBase>
</ComboboxMulti>
`;
